control_station(C,L_cur,L_demand,S_storage) :- c(C,i1,L_cur), c(C,i2,L_demand), c(C,i3,S_storage), control(C), not ab(C).



%calculate minimum
min(A,B,MIN) :- #int(A), #int(B), #int(MIN), A < B, MIN=A.
min(A,B,MIN) :- #int(A), #int(B), #int(MIN), A >= B, MIN=B.

%rules for activating plants
energy_needed(V) :- control_station(_,L_cur,L_demand,_), L_demand > L_cur, V = L_demand-L_cur.
storage_usable :- control_station(_,_,_,S_storage), S_storage != empty.
windspeed_ok :- control_station(_,_,_,_), S_wind <= 40 , S_wind >= 5, c(C,i4,S_wind).





%set to charge tested
p(C,o1,charge) :- control_station(C,L_cur,L_demand,S_storage), L_cur > L_demand, S_storage != full.
p(C,o4,2) :- control_station(C,L_cur,L_demand,S_storage), L_cur > L_demand, S_storage != full.
p(C,o5,P) :- control_station(C,L_cur,L_demand,S_storage), L_cur > L_demand, S_storage != full, min(DIF,V,P), DIF = L_cur-L_demand, w_charge(V).

%all other cases since we covered Lc><Ld only equals remains
p(C,o1,0):- control_station(C,L_cur,L_demand,_), L_cur = L_demand.
p(C,o2,0):- control_station(C,L_cur,L_demand,_), L_cur = L_demand.
p(C,o3,0):- control_station(C,L_cur,L_demand,_), L_cur = L_demand.
p(C,o4,0):- control_station(C,L_cur,L_demand,_), L_cur = L_demand.
p(C,o5,0):- control_station(C,L_cur,L_demand,_), L_cur = L_demand.
